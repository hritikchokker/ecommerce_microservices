version: '3.9'
services:
  orders_app:
    image: chokkerhritik/orders_app
    # build:
    #   context: ./orders
    #   dockerfile: Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_DATABASE_PORT}
      DATABASE_USER: ${POSTGRES_DATABASE_USER}
      DATABASE_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DATABASE_NAME}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  payments_app:
    image: chokkerhritik/payments_app
    # build:
    #   context: ./payment
    #   dockerfile: Dockerfile
    ports:
      - "3001:3000"
    env_file:
      - .env
    environment:
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_DATABASE_PORT}
      DATABASE_USER: ${POSTGRES_DATABASE_USER}
      DATABASE_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DATABASE_NAME}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  products_app:
    image: chokkerhritik/products_app
    # build:
    #   context: ./products
    #   dockerfile: Dockerfile
    ports:
      - "3002:3000"
    env_file:
      - .env
    environment:
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_DATABASE_PORT}
      DATABASE_USER: ${POSTGRES_DATABASE_USER}
      DATABASE_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DATABASE_NAME}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  users_app:
    image: chokkerhritik/users_app
    # build:
    #   context: ./user
    #   dockerfile: Dockerfile
    ports:
      - "3003:3000"
    env_file:
      - .env
    environment:
      DATABASE_HOST: ${POSTGRES_HOST}
      DATABASE_PORT: ${POSTGRES_DATABASE_PORT}
      DATABASE_USER: ${POSTGRES_DATABASE_USER}
      DATABASE_PASSWORD: ${POSTGRES_DATABASE_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DATABASE_NAME}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  zookeeper:
    image: 'wurstmeister/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'wurstmeister/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: ecommerce_app
    # volumes:
    #   db_data:

    # database:
    #   build: ./database
    #   image: postgres:13
    #   environment:
    #     POSTGRES_USER: postgres
    #     POSTGRES_PASSWORD: 1234
    #     POSTGRES_DB: ecommerce_app
    #   ports:
    #     - "3008:3008"
    #   volumes:
    #     - db_data:/var/lib/postgresql/data
    #   deploy:
    #     replicas: 1
    #     restart_policy:
    #       condition: on-failure
